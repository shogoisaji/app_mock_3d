# task_index.yaml
# タスク管理システム総合インデックス
# バージョン: 2.0
# 作成日: 2025-08-04

# ══════════════════════════════════════════════════════════════════
# プロダクト基礎知識
# ══════════════════════════════════════════════════════════════════

product_knowledge:
  description: "タスク管理システムの基本理解"
  overview: |
    このシステムは、構造化されたドキュメントを通じて、品質とトレーサビリティを
    重視したプロジェクト実行を目指すタスク管理システムです。
    個別のタスクは task_xxx.yaml で定義し、全体の進捗は task_list.yaml で
    一元管理します。

  status_indicators:
    "backlog": "未実施 - まだ開始されていないタスク"
    "in_progress": "実装中 - 現在進行中のタスク"
    "done": "実装済み - 完了したタスク"
    "blocked": "何らかの理由で停止中のタスク"

  task_management:
    description: "YAMLファイルベースのタスク管理フロー"
    individual_task_file: "task_###_(内容).yaml で個別のタスクを詳細に定義"
    master_task_list: "task_list.yaml で全タスクのステータスを一覧管理"
    workflow: "task_list.yaml を見て次に着手すべきタスクを判断"
    naming_convention: "task_[3桁番号]_[内容説明].yaml (例: task_001_user_auth.yaml)"

# ══════════════════════════════════════════════════════════════════
# 技術スタック・環境情報
# ══════════════════════════════════════════════════════════════════

tech_stack:
  description: "プロジェクトで使用する技術スタックと環境情報"

  languages:
    primary: "<メイン開発言語 (例: Python)>"
    secondary: "<補助言語 (例: Shell, SQL)>"
    version_requirements: "<言語バージョンの要件 (例: Python ≥3.9)>"

  frameworks:
    backend: "<バックエンドフレームワーク (例: FastAPI)>"
    frontend: "<フロントエンドフレームワーク (例: React)>"
    testing: "<テストフレームワーク (例: pytest)>"
    build_tools: "<ビルドツール (例: Vite)>"

  databases:
    primary: "<メインデータベース (例: PostgreSQL)>"
    cache: "<キャッシュシステム (例: Redis)>"
    migration_tools: "<マイグレーションツール (例: Alembic)>"

  infrastructure:
    deployment: "<デプロイ環境 (例: Docker)>"
    ci_cd: "<CI/CDツール (例: GitHub Actions)>"
    monitoring: "<監視ツール (例: Sentry)>"

  development_tools:
    package_manager: "<パッケージマネージャー (例: poetry)>"
    linting: "<コード品質ツール (例: ruff, prettier)>"
    type_checking: "<型チェックツール (例: mypy)>"

# ══════════════════════════════════════════════════════════════════
# テストコマンド・品質管理
# ══════════════════════════════════════════════════════════════════

test_commands:
  description: "品質保証のためのテスト・検証コマンド"

  unit_tests:
    command: "<ユニットテスト実行コマンド>"
    coverage_command: "<カバレッジ測定コマンド>"
    watch_mode: "<ウォッチモードコマンド>"

  integration_tests:
    command: "<統合テスト実行コマンド>"
    setup_command: "<テスト環境セットアップコマンド>"
    teardown_command: "<テスト環境クリーンアップコマンド>"

  e2e_tests:
    command: "<E2Eテスト実行コマンド>"
    browser_setup: "<ブラウザ環境セットアップ手順>"
    parallel_execution: "<並列実行設定>"

  code_quality:
    lint_command: "<リンター実行コマンド>"
    format_command: "<フォーマッター実行コマンド>"
    type_check_command: "<型チェックコマンド>"
    security_scan: "<セキュリティスキャンコマンド>"

  build_verification:
    build_command: "<ビルド実行コマンド>"
    preview_command: "<ビルド結果プレビューコマンド>"
    size_analysis: "<バンドルサイズ分析コマンド>"

# ══════════════════════════════════════════════════════════════════
# エスカレーションルール・問題解決
# ══════════════════════════════════════════════════════════════════

escalation_rules:
  description: "問題発生時のエスカレーション手順（3回失敗ルール）"

  failure_handling:
    rule: "同じ失敗・エラーを3回繰り返したら作業を停止"
    actions:
      1: "失敗詳細をタスクファイルに記録"
      2: "タスクステータスをblockedに変更"
      3: "(予定)Slack MCPを使用してadminに報告"

    report_format:
      channel: "<admin通知用Slackチャンネル>"
      message_template: |
        🚨 タスクブロック報告
        タスクID: {task_id}
        タイトル: {task_title}
        失敗内容: {error_description}
        最終失敗時刻: {timestamp}

# ══════════════════════════════════════════════════════════════════
# タスク設定の内容評価・品質管理
# ══════════════════════════════════════════════════════════════════

task_quality_assessment:
  description: "タスク設定の品質評価基準と改善ガイドライン"

  evaluation_criteria:
    clarity_score:
      excellent: "要件が明確で曖昧さがない（9-10点）"
      good: "大部分が明確だが一部曖昧（7-8点）"
      acceptable: "理解可能だが不明瞭な部分あり（5-6点）"
      poor: "要件が曖昧で理解困難（1-4点）"

    completeness_score:
      excellent: "全必要情報が含まれている（9-10点）"
      good: "重要情報は含まれているが詳細不足（7-8点）"
      acceptable: "基本情報はあるが補完が必要（5-6点）"
      poor: "重要情報が欠落している（1-4点）"

    feasibility_score:
      excellent: "現実的で達成可能（9-10点）"
      good: "概ね現実的だが調整が必要（7-8点）"
      acceptable: "達成可能だが困難（5-6点）"
      poor: "非現実的または不可能（1-4点）"

  quality_improvement_actions:
    low_clarity_tasks:
      - "要件の具体化と例示"
      - "曖昧な表現の明確化"
      - "成功基準の詳細定義"
      - "関係者との要件確認"

    incomplete_tasks:
      - "必要素材の洗い出し"
      - "依存関係の詳細調査"
      - "影響範囲の再評価"
      - "リソース要件の明確化"

    infeasible_tasks:
      - "タスクの分割・細分化"
      - "制約条件の再検討"
      - "代替アプローチの検討"
      - "スケジュールの調整"

  review_checkpoints:
    task_creation:
      - "□ 要件の明確性確認"
      - "□ 完了条件の測定可能性確認"
      - "□ 必要リソースの妥当性確認"
      - "□ 依存関係の正確性確認"

    progress_reviews:
      - "□ 進捗と見積もりの乖離確認"
      - "□ ブロッカーの早期発見"
      - "□ 品質基準の維持確認"
      - "□ スコープクリープの防止"

    completion_validation:
      - "□ 全成果物の品質確認"
      - "□ 受け入れ基準の充足確認"
      - "□ ドキュメントの完成度確認"
      - "□ 後続タスクへの影響確認"

# ══════════════════════════════════════════════════════════════════
# タスク設定ガイド
# ══════════════════════════════════════════════════════════════════

task_setup:
  description: "新しいタスクの設定方法"

  when_to_create_task:
    - "新機能の実装要件が発生した時"
    - "バグや問題の修正が必要な時"
    - "技術調査や分析が必要な時"
    - "ドキュメント作成・更新が必要な時"
    - "リファクタリングや改善が必要な時"
    - "環境設定や設定変更が必要な時"

  task_creation_steps:
    1:
      action: "要件の明確化"
      details: |
        - 何を達成したいか？
        - なぜ必要か？
        - 成功の定義は何か？
        - 影響範囲は？
        - 制約や前提条件は？

    2:
      action: "テンプレートの選択"
      details: |
        - /docs/tasks/templates/task_template.yaml を使用
        - 必須フィールドを全て確認
        - 適切なtask_idを割り当て（3桁、重複なし）

    3:
      action: "基本情報の設定"
      required_fields:
        - task_id: "001-999の範囲で一意の番号"
        - title: "50文字以内、具体的で分かりやすい名前"
        - status: "通常は 'backlog' から開始"
        - priority: "1(最高)〜5(最低)で設定"
        - tags: "分類用タグ（frontend, api, urgent等）"

    4:
      action: "依存関係の整理"
      details: |
        inputs（必要素材）の設定:
        - 仕様書、デザイン、前提PR等
        - status: present/pending/absent
        - required: true/false で必須度を明記

    5:
      action: "成果物の定義"
      details: |
        outputs（期待成果物）の設定:
        - 具体的なファイル名を列挙
        - 完了判定基準を明確化
        - status管理でタスク完了を判定

    6:
      action: "実装ステップの分解"
      details: |
        - 具体的で測定可能なステップに分割
        - 依存関係（dependencies）を正確に設定
        - 現実的な見積もり時間を設定
        - 各ステップの完了条件を明記

  validation_checklist:
    - "□ 必須フィールドが全て記入されている"
    - "□ task_idが重複していない"
    - "□ titleが具体的で理解しやすい"
    - "□ 依存関係が正しく設定されている"
    - "□ 見積もり時間が現実的である"
    - "□ 完了条件が測定可能である"
    - "□ 影響ファイルが完全にリストされている"

# ══════════════════════════════════════════════════════════════════
# タスク進行ガイド
# ══════════════════════════════════════════════════════════════════

task_execution:
  description: "タスクの実行とモニタリング方法"

  lifecycle_stages:
    backlog:
      description: "タスク登録済み、実行待ち"
      actions:
        - "必要素材の収集・確認"
        - "依存タスクの完了待ち"
        - "優先度とスケジュールの調整"

    in_progress:
      description: "タスク実行中"
      actions:
        - "進捗状況の定期更新"
        - "completed_stepsの記録"
        - "ブロッカーが発生した場合の記録"
        - "各ステップの完了時にacceptance_criteriaの確認"

    blocked:
      description: "何らかの理由で停止中"
      actions:
        - "ブロッカーの詳細をblockersフィールドに記録"
        - "解決策の検討と関係者への連絡"
        - "代替アプローチの検討"
        - "解決見込み時期の見積もり"

    done:
      description: "タスク完了"
      actions:
        - "全outputsのstatusがdone/failedであることを確認"
        - "完了日時の記録"
        - "成果物の品質確認"
        - "アーカイブ処理の実行"

  progress_monitoring:
    daily_checks:
      - "現在のステップ進捗確認"
      - "ブロッカーの有無確認"
      - "見積もりと実際の差異確認"

    weekly_reviews:
      - "全体進捗の評価"
      - "優先度の再評価"
      - "スケジュール調整の必要性確認"

    update_procedures:
      - "progress.current_stepの更新"
      - "progress.completed_stepsに完了ステップを追加"
      - "progress.notesに重要な記録を追加"
      - "updated_atタイムスタンプの更新"

# ══════════════════════════════════════════════════════════════════
# タスク完了時の処理
# ══════════════════════════════════════════════════════════════════

task_completion:
  description: "タスク完了時に実行する処理手順"

  completion_criteria:
    - "全てのoutputsのstatusがdone又はfailed"
    - "全てのstepsが完了"
    - "ブロッカーが全て解決済み"

  completion_procedures:
    pre_completion_validation:
      - "□ 全チェックリスト項目が完了マーク済み"
      - "□ 全実行フェーズが終了"
      - "□ テスト計画が実行済み（該当する場合）"
      - "□ リスク軽減策が実装済み"

    documentation_updates:
      - "□ 最終ステータスと完了日時を記録"
      - "□ 進捗セクションに最終サマリーを追加"
      - "□ 学んだ教訓や重要な注意事項を記録"
      - "□ 全ログエントリーが適切に日付付きで完成"

    quality_checks:
      - "□ AI検証チェックリストに対してレビュー（該当する場合）"
      - "□ 全成果物が完了の定義を満たすことを確認"
      - "□ 残依存関係やフォローアップタスクの確認"
      - "□ 参照されるファイル/リソースのアクセス可能性を検証"

    post_completion_actions:
      - "□ 依存タスクに完了ステータスを更新"
      - "□ 必要に応じてフォローアップタスクを作成"
      - "□ タスクが広いシステムに影響した場合、プロジェクト文書を更新"
      - "□ 一時ファイルやリソースのクリーンアップ"

  archival_process:
    description: "完了タスクのアーカイブ手順"
    steps:
      1: "最終的な品質確認を実施"
      2: "関連する全ドキュメントの整合性確認"
      3: "アーカイブ先ディレクトリへの移動"
      4: "インデックス情報の更新"
      5: "関連タスクへの完了通知"

# ══════════════════════════════════════════════════════════════════
# メタデータ
# ══════════════════════════════════════════════════════════════════

metadata:
  version: "2.0"
  created_at: "2025-08-04T15:00:00+09:00"
  updated_at: "2025-08-04T16:00:00+09:00"
  author: "System"
  description: "タスク管理システムの総合ガイドとインデックス"
  changelog:
    v2.0:
      - "task_listを別ファイルに分離し、本文書を静的なガイドブックとして再定義"
      - "技術スタックとテストコマンドをプレースホルダー形式に変更"
      - "task_template.yamlとの整合性を修正"
    v1.0:
      - "初回版作成"
  usage: |
    このファイルは新しい要件が発生した際に参照し、
    適切なタスク定義と管理を行うためのガイドとして使用する。
    技術スタック情報、テストコマンド、エスカレーション手順、
    品質評価基準を含む包括的なタスク管理システムとして機能する。
    タスクテンプレートと組み合わせて使用することで、
    一貫性のある高品質なタスク管理が可能になる。